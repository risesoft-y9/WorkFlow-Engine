﻿/**
 * version: 4.0.1
 *
 *
 */
"use strict";
import {b64_md5  } from "./ntkoUtil.js";


let letNtkoGUID = Math.random().toString(36);
let ntkoWinOpen;
let ntkoJsonIe;
let timer;
let ntkoSendDataToChildStrUrl;
let ntkoSendDataToChildSData;
let ntkowin;
let ntkoextensionmainifest;
let strURL1;
let userAgent = navigator.userAgent,
	rMsie = /(msie\s|trident.*rv:)([\w.]+)/,
	rFirefox = /(firefox)\/([\w.]+)/,
	rOpera = /(opera).+versi1on\/([\w.]+)/,
	rChrome = /(chrome)\/([\w.]+)/,
	rEdge = /(edg)\/([\w.]+)/,
	rSafari = /version\/([\w.]+).*(safari)/;
let browser;
let version;
let ua = userAgent.toLowerCase();

function uaMatch(ua) {
	let match = rMsie.exec(ua);
	if (match != null) {
		return { browser: "IE", version: match[2] || "0" };
	}
	match = rFirefox.exec(ua);
	if (match != null) {
		return { browser: match[1] || "", version: match[2] || "0" };
	}
	match = rOpera.exec(ua);
	if (match != null) {
		return { browser: match[1] || "", version: match[2] || "0" };
	}
	match = rChrome.exec(ua);
	if (match != null) {
		let matchedge = rEdge.exec(ua);
		if (matchedge != null) {
			return { browser: matchedge[1] || "", version: matchedge[2] || "0" };
		} else {
			return { browser: match[1] || "", version: match[2] || "0" };
		}
	}
	match = rSafari.exec(ua);
	if (match != null) {
		return { browser: match[2] || "", version: match[1] || "0" };
	}
	if (match != null) {
		return { browser: "", version: "0" };
	}
}
let browserMatch = uaMatch(userAgent.toLowerCase());
if (browserMatch.browser) {
	browser = browserMatch.browser;
	version = browserMatch.version;
}
let mimeTypes = navigator.mimeTypes;
let bChromeExtensionInstalled = false;
version = parseInt(version);

if ("chrome" === browserMatch.browser && version >= 45) {
	let img;
	img = new Image();
	img.src = "chrome-extension://lppkeogbkjlmmbjenbogdndlgmpiddda/icons/ntko.png";
	img.onload = function () {
		bChromeExtensionInstalled = true;
	};
	img.onerror = function () {
		bChromeExtensionInstalled = false;
	};
}
if ("edg" === browserMatch.browser) {
	let img;
	img = new Image();
	img.src = "chrome-extension://lppkeogbkjlmmbjenbogdndlgmpiddda/icons/ntko.png";
	img.onload = function (e) {
		bChromeExtensionInstalled = true;
	};
	img.onerror = function () {
		let imgedge;
		imgedge = new Image();
		imgedge.src = "chrome-extension://miogdolpaknhgnfoghcmnooafkiafkcc/icons/ntko.png";
		imgedge.onload = function () {
			bChromeExtensionInstalled = true;
		};
		imgedge.onerror = function () {
			bChromeExtensionInstalled = false;
		};

	};

}

export let ntkoBrowser = {
	ntkoSendDataToChild: function (strURL1, data) {
		if (typeof data === 'undefined') {
			return;
		}
		let strURL = ntkoBrowser.NtkoStrURL(strURL1);
		let jsonValue = '{"SendDataToChild":1,"GUID":"';
		jsonValue += b64_md5(strURL);
		jsonValue += '","URLMD5":"';
		jsonValue += b64_md5(strURL);
		jsonValue += '","ChildValue":"';
		jsonValue += data;
		jsonValue += '"}';
		let ntkobr = ntkoBrowser.NtkoBrower();
		if (ntkobr) {
			window.postMessage({ type: "FROM_NTKO_PAGE", text: jsonValue }, "*");
		} else {
			ntkoWinOpen.ntkoGetParentData(data);
		}
	},
	ExtensionInstalled: function () {
		let ntkobr = ntkoBrowser.NtkoBrower();
		console.info("--------ntkobr:" + ntkobr);
		if (!ntkobr) {
			if (browser == "IE") {
				return true;
			} else {
				let mimetype = navigator.mimeTypes["application/ntko-plug"];
				if (mimetype) {
					let plugin = mimetype.enabledPlugin;
					if (plugin) {
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			}
		}
		else {
			if ("firefox" === browserMatch.browser) {
				if ((typeof ntkoextensionmainifest != 'undefined') && ((null != ntkoextensionmainifest) && ("" != ntkoextensionmainifest))) {

					return true;
				} else {
					let bInstalled = false;
					if ("undefined" === typeof FirefoxInstalled)
						return (bInstalled);
					else
						return (window.FirefoxInstalled());
				}
			}
			else if ("chrome" === browserMatch.browser) {
				if ((typeof ntkoextensionmainifest != 'undefined') && ((null != ntkoextensionmainifest) && ("" != ntkoextensionmainifest))) {

					return true;
				} else {
					return (bChromeExtensionInstalled);
				}

			} else if ("edg" === browserMatch.browser) {
				if ((typeof ntkoextensionmainifest != 'undefined') && ((null != ntkoextensionmainifest) && ("" != ntkoextensionmainifest))) {
					return true;
				} else {
					return (bChromeExtensionInstalled);
				}
			}
		}
	},

	ntkoClose: function (strURL2) {
		let strURL = ntkoBrowser.NtkoStrURL(strURL2);
		let jsonValue = '{"Close":1,"GUID":"';
		jsonValue += b64_md5(strURL);
		jsonValue += '","URLMD5":"';
		jsonValue += b64_md5(strURL);
		jsonValue += '"}';
		let ntkobr = ntkoBrowser.NtkoBrower();
		if (ntkobr) {
			window.postMessage({ type: "FROM_NTKO_PAGE", text: jsonValue }, "*");
		} else {
			ntkoWinOpen.close();
		}
	},
	openWindow: function (strURL3, IsShowOnExtendMonitor, ProductCaption, ntkoBrowserProductKey, ntkoBrowserNoExpireKey, ntkoBrowserOptions, letUrlData, ntkowidth, ntkoheight, cookiesDomainPath) {
		let _this = this;
		if (letUrlData != null && letUrlData != "") {

			ntkoSendDataToChildSData = letUrlData;
			//ntkoSendDataToChildSData=encodeURIComponent(letUrlData);
		}
		let ntkowinscr = ntkoBrowser.NtkoWidthAndHeightWinScr(ntkowidth, ntkoheight);
		if (!ntkowinscr) {
			alert("设置窗口大小格式不正确");
			return;
		}
		console.info("---------strURL3:"+strURL3);
		let strURL = ntkoBrowser.NtkoStrURL(strURL3);
		strURL1 = strURL;
		let ntkoSessionURL = "";
		let jsonValue = '{"OpenWindow":1,"URL":"';
		jsonValue += strURL;
		jsonValue += '","GUID":"';
		jsonValue += b64_md5(strURL);
		jsonValue += '","URLMD5":"';
		jsonValue += b64_md5(strURL);
		jsonValue += '","ntkobrowserMatch":"';
		jsonValue += browserMatch.browser;
		jsonValue += '","IsShowOnExtendMonitor":"';
		jsonValue += IsShowOnExtendMonitor;
		jsonValue += '"';
		if ((typeof ProductCaption != 'undefined') && ((null != ProductCaption) && ("" != ProductCaption))) {
			jsonValue += ',"ProductCaption":"';
			jsonValue += ProductCaption;
			jsonValue += '"';
		}

		if ((typeof ntkoBrowserProductKey != 'undefined') && ((null != ntkoBrowserProductKey) && ("" != ntkoBrowserProductKey))) {
			jsonValue += ',"ProductKey":"';
			jsonValue += ntkoBrowserProductKey;
			jsonValue += '"';
		}

		if ((typeof ntkoBrowserNoExpireKey != 'undefined') && ((null != ntkoBrowserNoExpireKey) && ("" != ntkoBrowserNoExpireKey))) {
			jsonValue += ',"NoExpireKey":"';
			jsonValue += ntkoBrowserNoExpireKey;
			jsonValue += '"';
		}
		if (typeof ntkoSessionURL != 'undefined' && ((null != ntkoSessionURL) && ("" != ntkoSessionURL))) {
			jsonValue += ',"SessionURL":"';
			jsonValue += ntkoSessionURL;
			jsonValue += '"';
		}

		if (typeof ntkoBrowserOptions != 'undefined' && ((null != ntkoBrowserOptions) && ("" != ntkoBrowserOptions))) {
			jsonValue += ',"Options":"';
			jsonValue += ntkoBrowserOptions;
			jsonValue += '"';
		}



		let LocalStorge = window.localStorage;
		if (typeof LocalStorge != 'undefined' && (0 != LocalStorge.length)) {
			let letLocalDataList = [];
			for (let i = 0; i < LocalStorge.length; i++) {
				let letLocalData = {};
				letLocalData["StorageKey"] = LocalStorge.key(i);
				letLocalData["StorageValue"] = LocalStorge.getItem(LocalStorge.key(i));
				letLocalDataList[i] = letLocalData;
			}
			jsonValue += ',"LocalStorge":';
			jsonValue += JSON.stringify(letLocalDataList);
			jsonValue += '';
		}

		let SessionStorge = window.sessionStorage;
		if (typeof SessionStorge != 'undefined' && (0 != SessionStorge.length)) {
			let letSessionDataList = [];
			for (let i = 0; i < SessionStorge.length; i++) {
				let letSessionData = {};
				letSessionData["StorageKey"] = SessionStorge.key(i);
				letSessionData["StorageValue"] = SessionStorge.getItem(SessionStorge.key(i));
				letSessionDataList[i] = letSessionData;
			}

			jsonValue += ',"SessionStorge":';
			jsonValue += JSON.stringify(letSessionDataList);
			jsonValue += '';
		}
		if (typeof ntkowidth != 'undefined' && ((null != ntkowidth) && ("" != ntkowidth))) {
			jsonValue += ',"NtkoWidth":';
			jsonValue += ntkowidth;
			jsonValue += '';
		}

		if (typeof ntkoheight != 'undefined' && ((null != ntkoheight) && ("" != ntkoheight))) {
			jsonValue += ',"NtkoHeight":';
			jsonValue += ntkoheight;
			jsonValue += '';
		}
		if (typeof cookiesDomainPath != 'undefined' && ((null != cookiesDomainPath) && ("" != cookiesDomainPath))) {
			jsonValue += ',"CookiesDomainPath":';
			jsonValue += cookiesDomainPath;
			jsonValue += '';
		}

		jsonValue += '}';
		let ntkobr = ntkoBrowser.NtkoBrower();
		let systemType = ntkoBrowser.NtkoSystemType();//判断操作系统
		console.info("准备打开word--------ntkobr：" + ntkobr);
		if (ntkobr && systemType == "Windows") {
			window.postMessage({ type: "FROM_NTKO_PAGE", text: jsonValue }, "*");
		} else {
			ntkowin = b64_md5(strURL);
			if (ntkowidth == null || ntkowidth == "" || ntkowidth == "undefined") {
				ntkowidth = window.screen.width;
			}
			if (ntkoheight == null || ntkoheight == "" || ntkoheight == "undefined") {
				ntkoheight = window.screen.height;
			}
			ntkoWinOpen = window.open(strURL, ntkowin, "height=" + ntkoheight + ", width=" + ntkowidth + ", top=0,left=0,titlebar=no,toolbar =no, menubar=no, scrollbars=no, resizable=yes, location=no, status=no");
			ntkoWinOpen.resizeTo(ntkowidth, ntkoheight);
			ntkoWinOpen.focus();
		}
	},
	NtkoWShell: function () {

	},
	NtkoiTop: function () {
		return (window.screen.height - 30 - 300) / 2;
	},
	NtkoiLeft: function () {
		return (window.screen.width - 10 - 400) / 2;
	},
	NtkoBrower: function () {
		console.info("------browser:" + browser);
		console.info("------userAgent:" + userAgent);
		console.info("------version:" + version);
		if (browser == "IE") {
			return false;
		}
		if (browser == "firefox") {
			if (userAgent.indexOf("Windows NT 5.1") > -1) {
				return false;
			}
			if (version >= 50) {
				return true;
			} else {
				return false;
			}
		}
		if (browser == "chrome") {
			if (userAgent.indexOf("Windows NT 5.1") > -1) {
				return false;
			}
			if (version >= 45) {
				return true;
			} else {
				return false;
			}
		}
		if (browser == "edg") {
			return true;
		}
	},
	NtkoSystemType: function () {
		console.info("------browser:" + browser);
		console.info("------userAgent:" + userAgent);
		console.info("------version:" + version);
		if (userAgent.indexOf("Windows") > -1) {
			return "Windows";
		}
		if (userAgent.indexOf("Linux") > -1) {
			return "Linux";
		}
	},
	NtkoStrURL: function (strURL) {
		let testurl = window.location.search;
		let docUrl = document.location.toString();
		let wpathname = window.document.location.pathname;
		let pos = docUrl.indexOf(wpathname);
		let relUrl = docUrl.substring(0, pos);
		if ((null === strURL) || ("" === strURL)) {
			alert("打开路径的url为null");
			return;
		}
		let strLowser = strURL.toLowerCase();
		if ('/' != strURL.charAt(0)) {
			if (("http://" === strLowser.substr(0, 7)) || ("https://" === strLowser.substr(0, 8))){
				console.log('');
			}
			else {
				if (strURL.indexOf("../") == -1) {
					let pathName = window.location.href;
					let letLength = pathName.lastIndexOf("/");
					strURL = pathName.substr(0, letLength + 1) + strURL;
				}
				else {
					let strURLlen = strURL.length;
					strURL = strURL.substring(2, strURLlen);
					strURL = relUrl + strURL;
				}
				if (strURL.indexOf(testurl) == -1) {
					if (strURL.indexOf("?") == -1) {
						strURL = strURL + testurl
					}
					else {
						let docof = strURL.indexOf("?");
						let docend = strURL.length;
						let docs = strURL.substring(0, docof);
						let docsurl = strURL.substring(docof + 1, docend);
						strURL = docs + testurl + "&" + docsurl;
					}
				}
			}
		}
		else {
			let strURLlen = strURL.length;
			strURL = strURL.substring(0, strURLlen);
			strURL = relUrl + strURL;
		}
		return strURL;
	},
	NtkoWidthAndHeightWinScr: function (ntkowidth, ntkoheight) {

		let regNtko = /^\s*$/;
		if (typeof (ntkowidth) == "undefined" && typeof (ntkoheight) == "undefined") {
			return true;
		} else {
			if (regNtko.test(ntkowidth) || typeof (ntkowidth) != "number") {
				return false;
			} else {
				if (regNtko.test(ntkoheight) || typeof (ntkoheight) != "number") {
					return false;
				} else {
					return true;
				}
			}
		}
	},
	NtkoExtensionVersion: function () {
		if (browser == "firefox") {
			let ntkojsontext = JSON.parse(window.NtkoFireFoxVersion());
			let ntkofireforversion = ntkojsontext['ntkoversion'];
			return ntkofireforversion;
		} else {
			return ntkoextensionmainifest;
		}
	}
};

if (browser != "IE") {
	window.addEventListener("message", function (event) {
		if (event.source != window)
			return;
		if (event.data.type && (event.data.type == "FROM_NTKO_CONTEXT_PAGE")) {
			let vJsonData = JSON.parse(event.data.text);
			let jsonData = vJsonData["ntkoData"];
			if (typeof jsonData !== "undefined") {
				if (b64_md5(strURL1) === jsonData["ntkoGUID"])	// || letNtkoGUID === jsonData["ntkoGUID"]
				{
					if ("ntkoClose" === jsonData["functionName"]) {
						// 调用关闭事件
						try {
							//eval('ntkoCloseEvent()');
							(function (exports) { exports["ntkoCloseEvent"]() })(window)
						}catch(e){console.log(e);}
					}
					else if ("ntkoReturnValueToParentPage" === jsonData["functionName"]) {
						// 调用返回值事件,解析值
						let letFunctionName = jsonData["parentExecutionFunction"];		// 要执行的函数名
						if (typeof letFunctionName != 'undefined' && ((null != letFunctionName) && ("" != letFunctionName))) {
							let letFunctionAgrvs = jsonData["FunctionArgs"];			// 传递过来的参数值
							if (typeof letFunctionAgrvs != 'undefined' && ((null != letFunctionAgrvs) && ("" != letFunctionAgrvs))) {
								// 调用eval执行函数
								(function (exports) {
									exports[letFunctionName](letFunctionAgrvs[0], letFunctionAgrvs[1], letFunctionAgrvs[2], letFunctionAgrvs[3], letFunctionAgrvs[4], letFunctionAgrvs[5], letFunctionAgrvs[6], letFunctionAgrvs[7], letFunctionAgrvs[8]);
								})(window)
							}
						}
					} else if ("NtkoError" === jsonData["functionName"]) {
						//启动扩展报错信息
						//alert(jsonData["NtkoReason"])
						console.log("启动扩展报错信息:" + jsonData["NtkoReason"]);

					}
				}
			}
		}
		if (event.data.type && (event.data.type == "FROM_NTKO_MANIFEST")) {
			let ntkojsontext = JSON.parse(event.data.text);
			ntkoextensionmainifest = ntkojsontext['ntkoversion'];
		}
	}, false);
}
window.ieattachEventntko = function (data, letFunctionAgrvs) {
	if (typeof data !== "undefined") {
		if (typeof letFunctionAgrvs != 'undefined' && ((null != letFunctionAgrvs) && ("" != letFunctionAgrvs))) {
			window[data](letFunctionAgrvs[0], letFunctionAgrvs[1], letFunctionAgrvs[2], letFunctionAgrvs[3],
				letFunctionAgrvs[4], letFunctionAgrvs[5], letFunctionAgrvs[6], letFunctionAgrvs[7], letFunctionAgrvs[8]);
		}
	}
}

window.ntkoSendDataToChildtext = function (ntkoDataSendUrl) {
	if (ntkoSendDataToChildSData != null && ntkoSendDataToChildSData != "") {
		ntkoBrowser.ntkoSendDataToChild(ntkoDataSendUrl, ntkoSendDataToChildSData);
	}
}

// (function (exports) {
// 	exports.ntkoBrowser = ntkoBrowser;
// })(window)
